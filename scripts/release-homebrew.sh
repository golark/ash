#!/bin/bash
set -e

# Configuration
VERSION="${VERSION:-$(git describe --tags --abbrev=0 | sed 's/^v//')}"
REPO_NAME="homebrew-ash"
TAP_REPO="golark/$REPO_NAME"
GITHUB_USER="golark"

echo "üç∫ Homebrew Release Process for Ash v${VERSION}"
echo "================================================"

# Verify we're in the right directory
if [[ ! -f "ash.rb" ]]; then
    echo "‚ùå Error: ash.rb not found. Please run this script from the ash repository root."
    exit 1
fi

# Check if version is provided
if [[ -z "$VERSION" ]]; then
    echo "‚ùå Error: VERSION not set. Please provide a version:"
    echo "   VERSION=1.0.0 ./scripts/release-homebrew.sh"
    exit 1
fi

echo "üì¶ Version: $VERSION"
echo "üè∑Ô∏è  Tap Repository: $TAP_REPO"

# Step 1: Build and create Homebrew package
echo ""
echo "üî® Step 1: Building and packaging..."
#make build
#make homebrew

# Step 2: Get SHA256 from the package
PACKAGE_FILE="dist-package/ash-${VERSION}.tar.gz"
if [[ ! -f "$PACKAGE_FILE" ]]; then
    echo "‚ùå Error: Homebrew package not found: $PACKAGE_FILE"
    exit 1
fi

SHA256=$(shasum -a 256 "$PACKAGE_FILE" | cut -d' ' -f1)
echo "üîê SHA256: $SHA256"

# Step 3: Create temporary directory for tap repository
TEMP_DIR=$(mktemp -d)
ORIGINAL_DIR=$(pwd)
echo ""
echo "üìÅ Step 2: Setting up tap repository in $TEMP_DIR"

# Clone the tap repository
cd "$TEMP_DIR"
if git clone "https://github.com/$TAP_REPO.git" 2>/dev/null; then
    echo "‚úÖ Cloned existing tap repository"
else
    echo "‚ö†Ô∏è  Tap repository doesn't exist yet. Creating new repository..."
    mkdir "$REPO_NAME"
    cd "$REPO_NAME"
    git init
    git remote add origin "https://github.com/$TAP_REPO.git"
    echo "# Homebrew Tap for Ash" > README.md
    echo "" >> README.md
    echo "Install Ash with:" >> README.md
    echo "\`\`\`bash" >> README.md
    echo "brew tap cjan/ash" >> README.md
    echo "brew install ash" >> README.md
    echo "ash-install" >> README.md
    echo "\`\`\`" >> README.md
fi

cd "$REPO_NAME"

# Step 4: Update the formula
echo ""
echo "üìù Step 3: Updating Homebrew formula..."

# Copy the formula from the main repository
cp "$ORIGINAL_DIR/ash.rb" .

# Update the formula with new version, URL, and SHA256
RELEASE_URL="https://github.com/golark/ash/releases/download/v${VERSION}/ash-${VERSION}.tar.gz"

# Update version
sed -i.bak "s/version \"[^\"]*\"/version \"${VERSION}\"/" ash.rb

# Update URL
sed -i.bak "s|url \"[^\"]*\"|url \"${RELEASE_URL}\"|" ash.rb

# Update SHA256
sed -i.bak "s/sha256 \"[^\"]*\"/sha256 \"${SHA256}\"/" ash.rb

# Clean up backup files
rm -f ash.rb.bak

echo "‚úÖ Updated formula:"
echo "   Version: $VERSION"
echo "   URL: $RELEASE_URL"
echo "   SHA256: $SHA256"

# Step 5: Commit and push changes
echo ""
echo "üöÄ Step 4: Committing and pushing changes..."

# Check if there are changes to commit
if git diff --quiet; then
    echo "‚ÑπÔ∏è  No changes to commit (formula already up to date)"
else
    git add ash.rb
    git commit -m "Update ash to v${VERSION}

- Version: ${VERSION}
- URL: ${RELEASE_URL}
- SHA256: ${SHA256}

Generated by release script"
    
    echo "‚úÖ Committed changes"
    
    # Push to the tap repository
    if git push origin main; then
        echo "‚úÖ Pushed to tap repository"
    else
        echo "‚ö†Ô∏è  Failed to push automatically. Please push manually:"
        echo "   cd $TEMP_DIR/$REPO_NAME"
        echo "   git push origin main"
    fi
fi

# Step 6: Create GitHub release
echo ""
echo "üöÄ Step 5: Creating GitHub release..."

# Check if gh CLI is available
if ! command -v gh &> /dev/null; then
    echo "‚ö†Ô∏è  GitHub CLI (gh) not found. Please install it or create the release manually:"
    echo "   gh release create v${VERSION} $PACKAGE_FILE --title \"Ash v${VERSION}\" --notes \"Release v${VERSION}\""
else
    # Check if user is authenticated
    if ! gh auth status &> /dev/null; then
        echo "‚ö†Ô∏è  Not authenticated with GitHub CLI. Please run 'gh auth login' first."
        echo "   Then create the release manually:"
        echo "   gh release create v${VERSION} $PACKAGE_FILE --title \"Ash v${VERSION}\" --notes \"Release v${VERSION}\""
    else
        # Check if release already exists
        if gh release view "v${VERSION}" &> /dev/null; then
            echo "‚ÑπÔ∏è  Release v${VERSION} already exists. Updating with new package..."
            gh release upload "v${VERSION}" "$ORIGINAL_DIR/$PACKAGE_FILE" --clobber
            echo "‚úÖ Updated existing release with new package"
        else
            echo "üì¶ Creating new GitHub release v${VERSION}..."
            gh release create "v${VERSION}" "$ORIGINAL_DIR/$PACKAGE_FILE" \
                --title "Ash v${VERSION}" \
                --notes "Release v${VERSION} of Ash AI shell assistant

## Changes
- Updated Homebrew packaging
- Improved model download process
- Better error handling

## Installation
\`\`\`bash
brew tap golark/ash
brew install ash
ash-install
\`\`\`"
            echo "‚úÖ Created GitHub release v${VERSION}"
        fi
    fi
fi

# Step 7: Update main repository ash.rb file
echo ""
echo "üìù Step 6: Updating main repository ash.rb file..."

# Go back to original directory
cd "$ORIGINAL_DIR"

# Update the main ash.rb file with the new version
RELEASE_URL="https://github.com/golark/ash/releases/download/v${VERSION}/ash-${VERSION}.tar.gz"

# Update version
sed -i.bak "s/version \"[^\"]*\"/version \"${VERSION}\"/" ash.rb

# Update URL
sed -i.bak "s|url \"[^\"]*\"|url \"${RELEASE_URL}\"|" ash.rb

# Update SHA256
sed -i.bak "s/sha256 \"[^\"]*\"/sha256 \"${SHA256}\"/" ash.rb

# Clean up backup files
rm -f ash.rb.bak

echo "‚úÖ Updated main repository ash.rb:"
echo "   Version: $VERSION"
echo "   URL: $RELEASE_URL"
echo "   SHA256: $SHA256"

# Step 8: Cleanup and summary
echo ""
echo "üéâ Homebrew Release Summary"
echo "============================"
echo "‚úÖ Package created: $PACKAGE_FILE"
echo "üîê SHA256: $SHA256"
echo "üì¶ Tap repository: $TAP_REPO"
echo "üè∑Ô∏è  Version: $VERSION"
echo ""
echo "üìã Next steps:"
echo "1. Verify the tap repository was updated"
echo "2. Test installation: brew tap golark/ash && brew install ash"
echo ""
echo "üßπ Cleaning up temporary files..."
rm -rf "$TEMP_DIR"

echo "‚úÖ Homebrew release process complete!"
