[
  {"query": "move file document.txt to backup folder", "expected": ["mv document.txt backup/", "mv document.txt backup"], "points": 3},
  {"query": "copy file config.yaml to configs directory", "expected": ["cp config.yaml configs/", "cp config.yaml configs"], "points": 3},
  {"query": "move folder logs to archive directory", "expected": ["mv logs archive/", "mv logs archive"], "points": 3},
  {"query": "copy folder src to backup directory", "expected": ["cp -r src backup/", "cp -r src backup"], "points": 3},
  {"query": "move file data.csv to parent directory", "expected": ["mv data.csv ..", "mv data.csv ../"], "points": 3},
  {"query": "copy file script.sh to home directory", "expected": ["cp script.sh ~/", "cp script.sh $HOME/"], "points": 3},
  {"query": "move all txt files to documents folder", "expected": ["mv *.txt documents/", "mv *.txt documents"], "points": 3},
  {"query": "copy all python files to scripts directory", "expected": ["cp *.py scripts/", "cp *.py scripts"], "points": 3},
  {"query": "move folder project to desktop", "expected": ["mv project ~/Desktop/", "mv project ~/Desktop"], "points": 3},
  {"query": "copy folder images to under backup", "expected": ["cp -r images backup", "cp -r images backup/", "cp -r images ./backup"], "points": 3},
  {"query": "create empty file named config.txt", "expected": ["touch config.txt", "> config.txt"], "points": 3},
  {"query": "create directory named logs", "expected": ["mkdir logs", "mkdir -p logs"], "points": 3},
  {"query": "create nested directory structure data/logs/2024", "expected": ["mkdir -p data/logs/2024", "mkdir -p data/logs/2024/"], "points": 3},
  {"query": "remove file config.txt", "expected": ["rm config.txt", "rm -f config.txt"], "points": 3},
  {"query": "remove directory logs and all contents", "expected": ["rm -rf logs", "rm -r logs"], "points": 3},
  {"query": "create multiple files file1.txt file2.txt file3.txt", "expected": ["touch file1.txt file2.txt file3.txt"], "points": 3},
  {"query": "create directory logs with permissions 755", "expected": ["mkdir -m 755 logs", "mkdir logs && chmod 755 logs", "mkdir -p logs && chmod 755 logs"], "points": 3},
  {"query": "remove all txt files in current directory", "expected": ["rm *.txt", "rm -f *.txt"], "points": 3},
  {"query": "create symbolic link from source.txt to target.txt", "expected": ["ln -s source.txt target.txt", "ln -s source.txt target.txt"], "points": 3},
  {"query": "show first 10 lines of README.md", "expected": ["head -n 10 README.md", "cat README.md | head -n 10"], "points": 3},
  {"query": "count number of lines in file document.txt", "expected": ["wc -l document.txt", "cat document.txt | wc -l"], "points": 3},
  {"query": "count lines in all txt files", "expected": ["wc -l *.txt", "cat *.txt | wc -l"], "points": 3},
  {"query": "remove first 5 lines from file data.txt", "expected": ["tail -n +6 data.txt > temp && mv temp data.txt", "sed '1,5d' data.txt > temp && mv temp data.txt"], "points": 3},
  {"query": "remove last 3 lines from file config.txt", "expected": ["head -n -3 config.txt > temp && mv temp config.txt", "sed '$d' config.txt | sed '$d' | sed '$d' > temp && mv temp config.txt"], "points": 3},
  {"query": "remove lines containing error from log.txt", "expected": ["grep -v error log.txt > temp && mv temp log.txt", "sed '/error/d' log.txt > temp && mv temp log.txt"], "points": 3},
  {"query": "move lines 10 to 20 from source.txt to target.txt", "expected": ["sed -n '10,20p' source.txt >> target.txt && sed '10,20d' source.txt > temp && mv temp source.txt", "head -n 20 source.txt | tail -n 11 >> target.txt && sed '10,20d' source.txt > temp && mv temp source.txt"], "points": 3},
  {"query": "append line hello world to file greeting.txt", "expected": ["echo 'hello world' >> greeting.txt", "echo 'hello world' >> greeting.txt"], "points": 3},
  {"query": "insert line at beginning of file header.txt", "expected": ["echo '#!/bin/bash' | cat - header.txt > temp && mv temp header.txt", "sed '1i#!/bin/bash' header.txt > temp && mv temp header.txt"], "points": 3},
  {"query": "replace all occurrences of old with new in file update.txt", "expected": ["sed 's/old/new/g' update.txt > temp && mv temp update.txt", "sed -i 's/old/new/g' update.txt"], "points": 3}
]
